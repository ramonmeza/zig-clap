pub const __builtin_bswap16 = @import("std").zig.c_builtins.__builtin_bswap16;
pub const __builtin_bswap32 = @import("std").zig.c_builtins.__builtin_bswap32;
pub const __builtin_bswap64 = @import("std").zig.c_builtins.__builtin_bswap64;
pub const __builtin_signbit = @import("std").zig.c_builtins.__builtin_signbit;
pub const __builtin_signbitf = @import("std").zig.c_builtins.__builtin_signbitf;
pub const __builtin_popcount = @import("std").zig.c_builtins.__builtin_popcount;
pub const __builtin_ctz = @import("std").zig.c_builtins.__builtin_ctz;
pub const __builtin_clz = @import("std").zig.c_builtins.__builtin_clz;
pub const __builtin_sqrt = @import("std").zig.c_builtins.__builtin_sqrt;
pub const __builtin_sqrtf = @import("std").zig.c_builtins.__builtin_sqrtf;
pub const __builtin_sin = @import("std").zig.c_builtins.__builtin_sin;
pub const __builtin_sinf = @import("std").zig.c_builtins.__builtin_sinf;
pub const __builtin_cos = @import("std").zig.c_builtins.__builtin_cos;
pub const __builtin_cosf = @import("std").zig.c_builtins.__builtin_cosf;
pub const __builtin_exp = @import("std").zig.c_builtins.__builtin_exp;
pub const __builtin_expf = @import("std").zig.c_builtins.__builtin_expf;
pub const __builtin_exp2 = @import("std").zig.c_builtins.__builtin_exp2;
pub const __builtin_exp2f = @import("std").zig.c_builtins.__builtin_exp2f;
pub const __builtin_log = @import("std").zig.c_builtins.__builtin_log;
pub const __builtin_logf = @import("std").zig.c_builtins.__builtin_logf;
pub const __builtin_log2 = @import("std").zig.c_builtins.__builtin_log2;
pub const __builtin_log2f = @import("std").zig.c_builtins.__builtin_log2f;
pub const __builtin_log10 = @import("std").zig.c_builtins.__builtin_log10;
pub const __builtin_log10f = @import("std").zig.c_builtins.__builtin_log10f;
pub const __builtin_abs = @import("std").zig.c_builtins.__builtin_abs;
pub const __builtin_labs = @import("std").zig.c_builtins.__builtin_labs;
pub const __builtin_llabs = @import("std").zig.c_builtins.__builtin_llabs;
pub const __builtin_fabs = @import("std").zig.c_builtins.__builtin_fabs;
pub const __builtin_fabsf = @import("std").zig.c_builtins.__builtin_fabsf;
pub const __builtin_floor = @import("std").zig.c_builtins.__builtin_floor;
pub const __builtin_floorf = @import("std").zig.c_builtins.__builtin_floorf;
pub const __builtin_ceil = @import("std").zig.c_builtins.__builtin_ceil;
pub const __builtin_ceilf = @import("std").zig.c_builtins.__builtin_ceilf;
pub const __builtin_trunc = @import("std").zig.c_builtins.__builtin_trunc;
pub const __builtin_truncf = @import("std").zig.c_builtins.__builtin_truncf;
pub const __builtin_round = @import("std").zig.c_builtins.__builtin_round;
pub const __builtin_roundf = @import("std").zig.c_builtins.__builtin_roundf;
pub const __builtin_strlen = @import("std").zig.c_builtins.__builtin_strlen;
pub const __builtin_strcmp = @import("std").zig.c_builtins.__builtin_strcmp;
pub const __builtin_object_size = @import("std").zig.c_builtins.__builtin_object_size;
pub const __builtin___memset_chk = @import("std").zig.c_builtins.__builtin___memset_chk;
pub const __builtin_memset = @import("std").zig.c_builtins.__builtin_memset;
pub const __builtin___memcpy_chk = @import("std").zig.c_builtins.__builtin___memcpy_chk;
pub const __builtin_memcpy = @import("std").zig.c_builtins.__builtin_memcpy;
pub const __builtin_expect = @import("std").zig.c_builtins.__builtin_expect;
pub const __builtin_nanf = @import("std").zig.c_builtins.__builtin_nanf;
pub const __builtin_huge_valf = @import("std").zig.c_builtins.__builtin_huge_valf;
pub const __builtin_inff = @import("std").zig.c_builtins.__builtin_inff;
pub const __builtin_isnan = @import("std").zig.c_builtins.__builtin_isnan;
pub const __builtin_isinf = @import("std").zig.c_builtins.__builtin_isinf;
pub const __builtin_isinf_sign = @import("std").zig.c_builtins.__builtin_isinf_sign;
pub const __has_builtin = @import("std").zig.c_builtins.__has_builtin;
pub const __builtin_assume = @import("std").zig.c_builtins.__builtin_assume;
pub const __builtin_unreachable = @import("std").zig.c_builtins.__builtin_unreachable;
pub const __builtin_constant_p = @import("std").zig.c_builtins.__builtin_constant_p;
pub const __builtin_mul_overflow = @import("std").zig.c_builtins.__builtin_mul_overflow;
pub const int_least64_t = i64;
pub const uint_least64_t = u64;
pub const int_fast64_t = i64;
pub const uint_fast64_t = u64;
pub const int_least32_t = i32;
pub const uint_least32_t = u32;
pub const int_fast32_t = i32;
pub const uint_fast32_t = u32;
pub const int_least16_t = i16;
pub const uint_least16_t = u16;
pub const int_fast16_t = i16;
pub const uint_fast16_t = u16;
pub const int_least8_t = i8;
pub const uint_least8_t = u8;
pub const int_fast8_t = i8;
pub const uint_fast8_t = u8;
pub const intmax_t = c_longlong;
pub const uintmax_t = c_ulonglong;
pub const ptrdiff_t = c_longlong;
pub const wchar_t = c_ushort;
pub const max_align_t = extern struct {
    __clang_max_align_nonce1: c_longlong align(8) = @import("std").mem.zeroes(c_longlong),
    __clang_max_align_nonce2: c_longdouble align(16) = @import("std").mem.zeroes(c_longdouble),
};
pub const struct_clap_version = extern struct {
    major: u32 = @import("std").mem.zeroes(u32),
    minor: u32 = @import("std").mem.zeroes(u32),
    revision: u32 = @import("std").mem.zeroes(u32),
};
pub const clap_version_t = struct_clap_version;
pub const CLAP_VERSION: clap_version_t = clap_version_t{
    .major = @as(u32, @bitCast(@as(c_int, 1))),
    .minor = @as(u32, @bitCast(@as(c_int, 2))),
    .revision = @as(u32, @bitCast(@as(c_int, 2))),
};
pub fn clap_version_is_compatible(v: clap_version_t) callconv(.c) bool {
    _ = &v;
    return v.major >= @as(u32, @bitCast(@as(c_int, 1)));
}
pub const struct_clap_host = extern struct {
    clap_version: clap_version_t = @import("std").mem.zeroes(clap_version_t),
    host_data: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    name: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    vendor: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    url: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    version: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    get_extension: ?*const fn ([*c]const struct_clap_host, [*c]const u8) callconv(.c) ?*const anyopaque = @import("std").mem.zeroes(?*const fn ([*c]const struct_clap_host, [*c]const u8) callconv(.c) ?*const anyopaque),
    request_restart: ?*const fn ([*c]const struct_clap_host) callconv(.c) void = @import("std").mem.zeroes(?*const fn ([*c]const struct_clap_host) callconv(.c) void),
    request_process: ?*const fn ([*c]const struct_clap_host) callconv(.c) void = @import("std").mem.zeroes(?*const fn ([*c]const struct_clap_host) callconv(.c) void),
    request_callback: ?*const fn ([*c]const struct_clap_host) callconv(.c) void = @import("std").mem.zeroes(?*const fn ([*c]const struct_clap_host) callconv(.c) void),
};
pub const clap_host_t = struct_clap_host;
pub const CLAP_BEATTIME_FACTOR: i64 = @as(c_longlong, 1) << @intCast(31);
pub const CLAP_SECTIME_FACTOR: i64 = @as(c_longlong, 1) << @intCast(31);
pub const clap_beattime = i64;
pub const clap_sectime = i64;
pub const clap_id = u32;
pub const CLAP_INVALID_ID: clap_id = 4294967295;
pub const struct_clap_event_header = extern struct {
    size: u32 = @import("std").mem.zeroes(u32),
    time: u32 = @import("std").mem.zeroes(u32),
    space_id: u16 = @import("std").mem.zeroes(u16),
    type: u16 = @import("std").mem.zeroes(u16),
    flags: u32 = @import("std").mem.zeroes(u32),
};
pub const clap_event_header_t = struct_clap_event_header;
pub const CLAP_CORE_EVENT_SPACE_ID: u16 = 0;
pub const CLAP_EVENT_IS_LIVE: c_int = 1;
pub const CLAP_EVENT_DONT_RECORD: c_int = 2;
pub const enum_clap_event_flags = c_uint;
pub const CLAP_EVENT_NOTE_ON: c_int = 0;
pub const CLAP_EVENT_NOTE_OFF: c_int = 1;
pub const CLAP_EVENT_NOTE_CHOKE: c_int = 2;
pub const CLAP_EVENT_NOTE_END: c_int = 3;
pub const CLAP_EVENT_NOTE_EXPRESSION: c_int = 4;
pub const CLAP_EVENT_PARAM_VALUE: c_int = 5;
pub const CLAP_EVENT_PARAM_MOD: c_int = 6;
pub const CLAP_EVENT_PARAM_GESTURE_BEGIN: c_int = 7;
pub const CLAP_EVENT_PARAM_GESTURE_END: c_int = 8;
pub const CLAP_EVENT_TRANSPORT: c_int = 9;
pub const CLAP_EVENT_MIDI: c_int = 10;
pub const CLAP_EVENT_MIDI_SYSEX: c_int = 11;
pub const CLAP_EVENT_MIDI2: c_int = 12;
const enum_unnamed_1 = c_uint;
pub const struct_clap_event_note = extern struct {
    header: clap_event_header_t = @import("std").mem.zeroes(clap_event_header_t),
    note_id: i32 = @import("std").mem.zeroes(i32),
    port_index: i16 = @import("std").mem.zeroes(i16),
    channel: i16 = @import("std").mem.zeroes(i16),
    key: i16 = @import("std").mem.zeroes(i16),
    velocity: f64 = @import("std").mem.zeroes(f64),
};
pub const clap_event_note_t = struct_clap_event_note;
pub const CLAP_NOTE_EXPRESSION_VOLUME: c_int = 0;
pub const CLAP_NOTE_EXPRESSION_PAN: c_int = 1;
pub const CLAP_NOTE_EXPRESSION_TUNING: c_int = 2;
pub const CLAP_NOTE_EXPRESSION_VIBRATO: c_int = 3;
pub const CLAP_NOTE_EXPRESSION_EXPRESSION: c_int = 4;
pub const CLAP_NOTE_EXPRESSION_BRIGHTNESS: c_int = 5;
pub const CLAP_NOTE_EXPRESSION_PRESSURE: c_int = 6;
const enum_unnamed_2 = c_uint;
pub const clap_note_expression = i32;
pub const struct_clap_event_note_expression = extern struct {
    header: clap_event_header_t = @import("std").mem.zeroes(clap_event_header_t),
    expression_id: clap_note_expression = @import("std").mem.zeroes(clap_note_expression),
    note_id: i32 = @import("std").mem.zeroes(i32),
    port_index: i16 = @import("std").mem.zeroes(i16),
    channel: i16 = @import("std").mem.zeroes(i16),
    key: i16 = @import("std").mem.zeroes(i16),
    value: f64 = @import("std").mem.zeroes(f64),
};
pub const clap_event_note_expression_t = struct_clap_event_note_expression;
pub const struct_clap_event_param_value = extern struct {
    header: clap_event_header_t = @import("std").mem.zeroes(clap_event_header_t),
    param_id: clap_id = @import("std").mem.zeroes(clap_id),
    cookie: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    note_id: i32 = @import("std").mem.zeroes(i32),
    port_index: i16 = @import("std").mem.zeroes(i16),
    channel: i16 = @import("std").mem.zeroes(i16),
    key: i16 = @import("std").mem.zeroes(i16),
    value: f64 = @import("std").mem.zeroes(f64),
};
pub const clap_event_param_value_t = struct_clap_event_param_value;
pub const struct_clap_event_param_mod = extern struct {
    header: clap_event_header_t = @import("std").mem.zeroes(clap_event_header_t),
    param_id: clap_id = @import("std").mem.zeroes(clap_id),
    cookie: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    note_id: i32 = @import("std").mem.zeroes(i32),
    port_index: i16 = @import("std").mem.zeroes(i16),
    channel: i16 = @import("std").mem.zeroes(i16),
    key: i16 = @import("std").mem.zeroes(i16),
    amount: f64 = @import("std").mem.zeroes(f64),
};
pub const clap_event_param_mod_t = struct_clap_event_param_mod;
pub const struct_clap_event_param_gesture = extern struct {
    header: clap_event_header_t = @import("std").mem.zeroes(clap_event_header_t),
    param_id: clap_id = @import("std").mem.zeroes(clap_id),
};
pub const clap_event_param_gesture_t = struct_clap_event_param_gesture;
pub const CLAP_TRANSPORT_HAS_TEMPO: c_int = 1;
pub const CLAP_TRANSPORT_HAS_BEATS_TIMELINE: c_int = 2;
pub const CLAP_TRANSPORT_HAS_SECONDS_TIMELINE: c_int = 4;
pub const CLAP_TRANSPORT_HAS_TIME_SIGNATURE: c_int = 8;
pub const CLAP_TRANSPORT_IS_PLAYING: c_int = 16;
pub const CLAP_TRANSPORT_IS_RECORDING: c_int = 32;
pub const CLAP_TRANSPORT_IS_LOOP_ACTIVE: c_int = 64;
pub const CLAP_TRANSPORT_IS_WITHIN_PRE_ROLL: c_int = 128;
pub const enum_clap_transport_flags = c_uint;
pub const struct_clap_event_transport = extern struct {
    header: clap_event_header_t = @import("std").mem.zeroes(clap_event_header_t),
    flags: u32 = @import("std").mem.zeroes(u32),
    song_pos_beats: clap_beattime = @import("std").mem.zeroes(clap_beattime),
    song_pos_seconds: clap_sectime = @import("std").mem.zeroes(clap_sectime),
    tempo: f64 = @import("std").mem.zeroes(f64),
    tempo_inc: f64 = @import("std").mem.zeroes(f64),
    loop_start_beats: clap_beattime = @import("std").mem.zeroes(clap_beattime),
    loop_end_beats: clap_beattime = @import("std").mem.zeroes(clap_beattime),
    loop_start_seconds: clap_sectime = @import("std").mem.zeroes(clap_sectime),
    loop_end_seconds: clap_sectime = @import("std").mem.zeroes(clap_sectime),
    bar_start: clap_beattime = @import("std").mem.zeroes(clap_beattime),
    bar_number: i32 = @import("std").mem.zeroes(i32),
    tsig_num: u16 = @import("std").mem.zeroes(u16),
    tsig_denom: u16 = @import("std").mem.zeroes(u16),
};
pub const clap_event_transport_t = struct_clap_event_transport;
pub const struct_clap_event_midi = extern struct {
    header: clap_event_header_t = @import("std").mem.zeroes(clap_event_header_t),
    port_index: u16 = @import("std").mem.zeroes(u16),
    data: [3]u8 = @import("std").mem.zeroes([3]u8),
};
pub const clap_event_midi_t = struct_clap_event_midi;
pub const struct_clap_event_midi_sysex = extern struct {
    header: clap_event_header_t = @import("std").mem.zeroes(clap_event_header_t),
    port_index: u16 = @import("std").mem.zeroes(u16),
    buffer: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    size: u32 = @import("std").mem.zeroes(u32),
};
pub const clap_event_midi_sysex_t = struct_clap_event_midi_sysex;
pub const struct_clap_event_midi2 = extern struct {
    header: clap_event_header_t = @import("std").mem.zeroes(clap_event_header_t),
    port_index: u16 = @import("std").mem.zeroes(u16),
    data: [4]u32 = @import("std").mem.zeroes([4]u32),
};
pub const clap_event_midi2_t = struct_clap_event_midi2;
pub const struct_clap_input_events = extern struct {
    ctx: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    size: ?*const fn ([*c]const struct_clap_input_events) callconv(.c) u32 = @import("std").mem.zeroes(?*const fn ([*c]const struct_clap_input_events) callconv(.c) u32),
    get: ?*const fn ([*c]const struct_clap_input_events, u32) callconv(.c) [*c]const clap_event_header_t = @import("std").mem.zeroes(?*const fn ([*c]const struct_clap_input_events, u32) callconv(.c) [*c]const clap_event_header_t),
};
pub const clap_input_events_t = struct_clap_input_events;
pub const struct_clap_output_events = extern struct {
    ctx: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    try_push: ?*const fn ([*c]const struct_clap_output_events, [*c]const clap_event_header_t) callconv(.c) bool = @import("std").mem.zeroes(?*const fn ([*c]const struct_clap_output_events, [*c]const clap_event_header_t) callconv(.c) bool),
};
pub const clap_output_events_t = struct_clap_output_events;
pub const struct_clap_audio_buffer = extern struct {
    data32: [*c][*c]f32 = @import("std").mem.zeroes([*c][*c]f32),
    data64: [*c][*c]f64 = @import("std").mem.zeroes([*c][*c]f64),
    channel_count: u32 = @import("std").mem.zeroes(u32),
    latency: u32 = @import("std").mem.zeroes(u32),
    constant_mask: u64 = @import("std").mem.zeroes(u64),
};
pub const clap_audio_buffer_t = struct_clap_audio_buffer;
pub const CLAP_PROCESS_ERROR: c_int = 0;
pub const CLAP_PROCESS_CONTINUE: c_int = 1;
pub const CLAP_PROCESS_CONTINUE_IF_NOT_QUIET: c_int = 2;
pub const CLAP_PROCESS_TAIL: c_int = 3;
pub const CLAP_PROCESS_SLEEP: c_int = 4;
const enum_unnamed_3 = c_uint;
pub const clap_process_status = i32;
pub const struct_clap_process = extern struct {
    steady_time: i64 = @import("std").mem.zeroes(i64),
    frames_count: u32 = @import("std").mem.zeroes(u32),
    transport: [*c]const clap_event_transport_t = @import("std").mem.zeroes([*c]const clap_event_transport_t),
    audio_inputs: [*c]const clap_audio_buffer_t = @import("std").mem.zeroes([*c]const clap_audio_buffer_t),
    audio_outputs: [*c]clap_audio_buffer_t = @import("std").mem.zeroes([*c]clap_audio_buffer_t),
    audio_inputs_count: u32 = @import("std").mem.zeroes(u32),
    audio_outputs_count: u32 = @import("std").mem.zeroes(u32),
    in_events: [*c]const clap_input_events_t = @import("std").mem.zeroes([*c]const clap_input_events_t),
    out_events: [*c]const clap_output_events_t = @import("std").mem.zeroes([*c]const clap_output_events_t),
};
pub const clap_process_t = struct_clap_process;
pub const struct_clap_plugin_descriptor = extern struct {
    clap_version: clap_version_t = @import("std").mem.zeroes(clap_version_t),
    id: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    name: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    vendor: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    url: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    manual_url: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    support_url: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    version: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    description: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    features: [*c]const [*c]const u8 = @import("std").mem.zeroes([*c]const [*c]const u8),
};
pub const clap_plugin_descriptor_t = struct_clap_plugin_descriptor;
pub const struct_clap_plugin = extern struct {
    desc: [*c]const clap_plugin_descriptor_t = @import("std").mem.zeroes([*c]const clap_plugin_descriptor_t),
    plugin_data: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    init: ?*const fn ([*c]const struct_clap_plugin) callconv(.c) bool = @import("std").mem.zeroes(?*const fn ([*c]const struct_clap_plugin) callconv(.c) bool),
    destroy: ?*const fn ([*c]const struct_clap_plugin) callconv(.c) void = @import("std").mem.zeroes(?*const fn ([*c]const struct_clap_plugin) callconv(.c) void),
    activate: ?*const fn ([*c]const struct_clap_plugin, f64, u32, u32) callconv(.c) bool = @import("std").mem.zeroes(?*const fn ([*c]const struct_clap_plugin, f64, u32, u32) callconv(.c) bool),
    deactivate: ?*const fn ([*c]const struct_clap_plugin) callconv(.c) void = @import("std").mem.zeroes(?*const fn ([*c]const struct_clap_plugin) callconv(.c) void),
    start_processing: ?*const fn ([*c]const struct_clap_plugin) callconv(.c) bool = @import("std").mem.zeroes(?*const fn ([*c]const struct_clap_plugin) callconv(.c) bool),
    stop_processing: ?*const fn ([*c]const struct_clap_plugin) callconv(.c) void = @import("std").mem.zeroes(?*const fn ([*c]const struct_clap_plugin) callconv(.c) void),
    reset: ?*const fn ([*c]const struct_clap_plugin) callconv(.c) void = @import("std").mem.zeroes(?*const fn ([*c]const struct_clap_plugin) callconv(.c) void),
    process: ?*const fn ([*c]const struct_clap_plugin, [*c]const clap_process_t) callconv(.c) clap_process_status = @import("std").mem.zeroes(?*const fn ([*c]const struct_clap_plugin, [*c]const clap_process_t) callconv(.c) clap_process_status),
    get_extension: ?*const fn ([*c]const struct_clap_plugin, [*c]const u8) callconv(.c) ?*const anyopaque = @import("std").mem.zeroes(?*const fn ([*c]const struct_clap_plugin, [*c]const u8) callconv(.c) ?*const anyopaque),
    on_main_thread: ?*const fn ([*c]const struct_clap_plugin) callconv(.c) void = @import("std").mem.zeroes(?*const fn ([*c]const struct_clap_plugin) callconv(.c) void),
};
pub const clap_plugin_t = struct_clap_plugin;
pub const CLAP_EXT_POSIX_FD_SUPPORT: [21:0]u8 = "clap.posix-fd-support".*;
pub const CLAP_POSIX_FD_READ: c_int = 1;
pub const CLAP_POSIX_FD_WRITE: c_int = 2;
pub const CLAP_POSIX_FD_ERROR: c_int = 4;
const enum_unnamed_4 = c_uint;
pub const clap_posix_fd_flags_t = u32;
pub const struct_clap_plugin_posix_fd_support = extern struct {
    on_fd: ?*const fn ([*c]const clap_plugin_t, c_int, clap_posix_fd_flags_t) callconv(.c) void = @import("std").mem.zeroes(?*const fn ([*c]const clap_plugin_t, c_int, clap_posix_fd_flags_t) callconv(.c) void),
};
pub const clap_plugin_posix_fd_support_t = struct_clap_plugin_posix_fd_support;
pub const struct_clap_host_posix_fd_support = extern struct {
    register_fd: ?*const fn ([*c]const clap_host_t, c_int, clap_posix_fd_flags_t) callconv(.c) bool = @import("std").mem.zeroes(?*const fn ([*c]const clap_host_t, c_int, clap_posix_fd_flags_t) callconv(.c) bool),
    modify_fd: ?*const fn ([*c]const clap_host_t, c_int, clap_posix_fd_flags_t) callconv(.c) bool = @import("std").mem.zeroes(?*const fn ([*c]const clap_host_t, c_int, clap_posix_fd_flags_t) callconv(.c) bool),
    unregister_fd: ?*const fn ([*c]const clap_host_t, c_int) callconv(.c) bool = @import("std").mem.zeroes(?*const fn ([*c]const clap_host_t, c_int) callconv(.c) bool),
};
pub const clap_host_posix_fd_support_t = struct_clap_host_posix_fd_support;
pub const __llvm__ = @as(c_int, 1);
pub const __clang__ = @as(c_int, 1);
pub const __clang_major__ = @as(c_int, 19);
pub const __clang_minor__ = @as(c_int, 1);
pub const __clang_patchlevel__ = @as(c_int, 0);
pub const __clang_version__ = "19.1.0 (https://github.com/ziglang/zig-bootstrap cafebd74b6c664a45989f8dd6fec07a64708df06)";
pub const __GNUC__ = @as(c_int, 4);
pub const __GNUC_MINOR__ = @as(c_int, 2);
pub const __GNUC_PATCHLEVEL__ = @as(c_int, 1);
pub const __GXX_ABI_VERSION = @as(c_int, 1002);
pub const __ATOMIC_RELAXED = @as(c_int, 0);
pub const __ATOMIC_CONSUME = @as(c_int, 1);
pub const __ATOMIC_ACQUIRE = @as(c_int, 2);
pub const __ATOMIC_RELEASE = @as(c_int, 3);
pub const __ATOMIC_ACQ_REL = @as(c_int, 4);
pub const __ATOMIC_SEQ_CST = @as(c_int, 5);
pub const __MEMORY_SCOPE_SYSTEM = @as(c_int, 0);
pub const __MEMORY_SCOPE_DEVICE = @as(c_int, 1);
pub const __MEMORY_SCOPE_WRKGRP = @as(c_int, 2);
pub const __MEMORY_SCOPE_WVFRNT = @as(c_int, 3);
pub const __MEMORY_SCOPE_SINGLE = @as(c_int, 4);
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = @as(c_int, 0);
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = @as(c_int, 1);
pub const __OPENCL_MEMORY_SCOPE_DEVICE = @as(c_int, 2);
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = @as(c_int, 3);
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = @as(c_int, 4);
pub const __FPCLASS_SNAN = @as(c_int, 0x0001);
pub const __FPCLASS_QNAN = @as(c_int, 0x0002);
pub const __FPCLASS_NEGINF = @as(c_int, 0x0004);
pub const __FPCLASS_NEGNORMAL = @as(c_int, 0x0008);
pub const __FPCLASS_NEGSUBNORMAL = @as(c_int, 0x0010);
pub const __FPCLASS_NEGZERO = @as(c_int, 0x0020);
pub const __FPCLASS_POSZERO = @as(c_int, 0x0040);
pub const __FPCLASS_POSSUBNORMAL = @as(c_int, 0x0080);
pub const __FPCLASS_POSNORMAL = @as(c_int, 0x0100);
pub const __FPCLASS_POSINF = @as(c_int, 0x0200);
pub const __PRAGMA_REDEFINE_EXTNAME = @as(c_int, 1);
pub const __VERSION__ = "Clang 19.1.0 (https://github.com/ziglang/zig-bootstrap cafebd74b6c664a45989f8dd6fec07a64708df06)";
pub const __GXX_TYPEINFO_EQUALITY_INLINE = @as(c_int, 0);
pub const __OBJC_BOOL_IS_BOOL = @as(c_int, 0);
pub const __CONSTANT_CFSTRINGS__ = @as(c_int, 1);
pub const __SEH__ = @as(c_int, 1);
pub const __clang_literal_encoding__ = "UTF-8";
pub const __clang_wide_literal_encoding__ = "UTF-16";
pub const __ORDER_LITTLE_ENDIAN__ = @as(c_int, 1234);
pub const __ORDER_BIG_ENDIAN__ = @as(c_int, 4321);
pub const __ORDER_PDP_ENDIAN__ = @as(c_int, 3412);
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = @as(c_int, 1);
pub const __CHAR_BIT__ = @as(c_int, 8);
pub const __BOOL_WIDTH__ = @as(c_int, 8);
pub const __SHRT_WIDTH__ = @as(c_int, 16);
pub const __INT_WIDTH__ = @as(c_int, 32);
pub const __LONG_WIDTH__ = @as(c_int, 32);
pub const __LLONG_WIDTH__ = @as(c_int, 64);
pub const __BITINT_MAXWIDTH__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 8388608, .decimal);
pub const __SCHAR_MAX__ = @as(c_int, 127);
pub const __SHRT_MAX__ = @as(c_int, 32767);
pub const __INT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __LONG_MAX__ = @as(c_long, 2147483647);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __WCHAR_WIDTH__ = @as(c_int, 16);
pub const __WINT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __WINT_WIDTH__ = @as(c_int, 16);
pub const __INTMAX_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INTMAX_WIDTH__ = @as(c_int, 64);
pub const __SIZE_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __SIZE_WIDTH__ = @as(c_int, 64);
pub const __UINTMAX_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINTMAX_WIDTH__ = @as(c_int, 64);
pub const __PTRDIFF_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __PTRDIFF_WIDTH__ = @as(c_int, 64);
pub const __INTPTR_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INTPTR_WIDTH__ = @as(c_int, 64);
pub const __UINTPTR_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINTPTR_WIDTH__ = @as(c_int, 64);
pub const __SIZEOF_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_FLOAT__ = @as(c_int, 4);
pub const __SIZEOF_INT__ = @as(c_int, 4);
pub const __SIZEOF_LONG__ = @as(c_int, 4);
pub const __SIZEOF_LONG_DOUBLE__ = @as(c_int, 16);
pub const __SIZEOF_LONG_LONG__ = @as(c_int, 8);
pub const __SIZEOF_POINTER__ = @as(c_int, 8);
pub const __SIZEOF_SHORT__ = @as(c_int, 2);
pub const __SIZEOF_PTRDIFF_T__ = @as(c_int, 8);
pub const __SIZEOF_SIZE_T__ = @as(c_int, 8);
pub const __SIZEOF_WCHAR_T__ = @as(c_int, 2);
pub const __SIZEOF_WINT_T__ = @as(c_int, 2);
pub const __SIZEOF_INT128__ = @as(c_int, 16);
pub const __INTMAX_TYPE__ = c_longlong;
pub const __INTMAX_FMTd__ = "lld";
pub const __INTMAX_FMTi__ = "lli";
pub const __INTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `LL`");
// (no file):95:9
pub const __UINTMAX_TYPE__ = c_ulonglong;
pub const __UINTMAX_FMTo__ = "llo";
pub const __UINTMAX_FMTu__ = "llu";
pub const __UINTMAX_FMTx__ = "llx";
pub const __UINTMAX_FMTX__ = "llX";
pub const __UINTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `ULL`");
// (no file):101:9
pub const __PTRDIFF_TYPE__ = c_longlong;
pub const __PTRDIFF_FMTd__ = "lld";
pub const __PTRDIFF_FMTi__ = "lli";
pub const __INTPTR_TYPE__ = c_longlong;
pub const __INTPTR_FMTd__ = "lld";
pub const __INTPTR_FMTi__ = "lli";
pub const __SIZE_TYPE__ = c_ulonglong;
pub const __SIZE_FMTo__ = "llo";
pub const __SIZE_FMTu__ = "llu";
pub const __SIZE_FMTx__ = "llx";
pub const __SIZE_FMTX__ = "llX";
pub const __WCHAR_TYPE__ = c_ushort;
pub const __WINT_TYPE__ = c_ushort;
pub const __SIG_ATOMIC_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __SIG_ATOMIC_WIDTH__ = @as(c_int, 32);
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTPTR_TYPE__ = c_ulonglong;
pub const __UINTPTR_FMTo__ = "llo";
pub const __UINTPTR_FMTu__ = "llu";
pub const __UINTPTR_FMTx__ = "llx";
pub const __UINTPTR_FMTX__ = "llX";
pub const __FLT16_DENORM_MIN__ = @as(f16, 5.9604644775390625e-8);
pub const __FLT16_NORM_MAX__ = @as(f16, 6.5504e+4);
pub const __FLT16_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT16_DIG__ = @as(c_int, 3);
pub const __FLT16_DECIMAL_DIG__ = @as(c_int, 5);
pub const __FLT16_EPSILON__ = @as(f16, 9.765625e-4);
pub const __FLT16_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT16_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT16_MANT_DIG__ = @as(c_int, 11);
pub const __FLT16_MAX_10_EXP__ = @as(c_int, 4);
pub const __FLT16_MAX_EXP__ = @as(c_int, 16);
pub const __FLT16_MAX__ = @as(f16, 6.5504e+4);
pub const __FLT16_MIN_10_EXP__ = -@as(c_int, 4);
pub const __FLT16_MIN_EXP__ = -@as(c_int, 13);
pub const __FLT16_MIN__ = @as(f16, 6.103515625e-5);
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_NORM_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT_DIG__ = @as(c_int, 6);
pub const __FLT_DECIMAL_DIG__ = @as(c_int, 9);
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT_MANT_DIG__ = @as(c_int, 24);
pub const __FLT_MAX_10_EXP__ = @as(c_int, 38);
pub const __FLT_MAX_EXP__ = @as(c_int, 128);
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -@as(c_int, 37);
pub const __FLT_MIN_EXP__ = -@as(c_int, 125);
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = @as(f64, 4.9406564584124654e-324);
pub const __DBL_NORM_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_HAS_DENORM__ = @as(c_int, 1);
pub const __DBL_DIG__ = @as(c_int, 15);
pub const __DBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __DBL_EPSILON__ = @as(f64, 2.2204460492503131e-16);
pub const __DBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __DBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __DBL_MANT_DIG__ = @as(c_int, 53);
pub const __DBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __DBL_MAX_EXP__ = @as(c_int, 1024);
pub const __DBL_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __DBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __DBL_MIN__ = @as(f64, 2.2250738585072014e-308);
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 3.64519953188247460253e-4951);
pub const __LDBL_NORM_MAX__ = @as(c_longdouble, 1.18973149535723176502e+4932);
pub const __LDBL_HAS_DENORM__ = @as(c_int, 1);
pub const __LDBL_DIG__ = @as(c_int, 18);
pub const __LDBL_DECIMAL_DIG__ = @as(c_int, 21);
pub const __LDBL_EPSILON__ = @as(c_longdouble, 1.08420217248550443401e-19);
pub const __LDBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __LDBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __LDBL_MANT_DIG__ = @as(c_int, 64);
pub const __LDBL_MAX_10_EXP__ = @as(c_int, 4932);
pub const __LDBL_MAX_EXP__ = @as(c_int, 16384);
pub const __LDBL_MAX__ = @as(c_longdouble, 1.18973149535723176502e+4932);
pub const __LDBL_MIN_10_EXP__ = -@as(c_int, 4931);
pub const __LDBL_MIN_EXP__ = -@as(c_int, 16381);
pub const __LDBL_MIN__ = @as(c_longdouble, 3.36210314311209350626e-4932);
pub const __POINTER_WIDTH__ = @as(c_int, 64);
pub const __BIGGEST_ALIGNMENT__ = @as(c_int, 16);
pub const __WCHAR_UNSIGNED__ = @as(c_int, 1);
pub const __WINT_UNSIGNED__ = @as(c_int, 1);
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT8_C_SUFFIX__ = "";
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT16_C_SUFFIX__ = "";
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT32_C_SUFFIX__ = "";
pub const __INT64_TYPE__ = c_longlong;
pub const __INT64_FMTd__ = "lld";
pub const __INT64_FMTi__ = "lli";
pub const __INT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `LL`");
// (no file):203:9
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_C_SUFFIX__ = "";
pub const __UINT8_MAX__ = @as(c_int, 255);
pub const __INT8_MAX__ = @as(c_int, 127);
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_C_SUFFIX__ = "";
pub const __UINT16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __INT16_MAX__ = @as(c_int, 32767);
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `U`");
// (no file):225:9
pub const __UINT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __INT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __UINT64_TYPE__ = c_ulonglong;
pub const __UINT64_FMTo__ = "llo";
pub const __UINT64_FMTu__ = "llu";
pub const __UINT64_FMTx__ = "llx";
pub const __UINT64_FMTX__ = "llX";
pub const __UINT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `ULL`");
// (no file):233:9
pub const __UINT64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __INT64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = @as(c_int, 127);
pub const __INT_LEAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = @as(c_int, 255);
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = @as(c_int, 32767);
pub const __INT_LEAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_LEAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_TYPE__ = c_longlong;
pub const __INT_LEAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_LEAST64_FMTd__ = "lld";
pub const __INT_LEAST64_FMTi__ = "lli";
pub const __UINT_LEAST64_TYPE__ = c_ulonglong;
pub const __UINT_LEAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_LEAST64_FMTo__ = "llo";
pub const __UINT_LEAST64_FMTu__ = "llu";
pub const __UINT_LEAST64_FMTx__ = "llx";
pub const __UINT_LEAST64_FMTX__ = "llX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = @as(c_int, 127);
pub const __INT_FAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = @as(c_int, 255);
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = @as(c_int, 32767);
pub const __INT_FAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_FAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_TYPE__ = c_longlong;
pub const __INT_FAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_FAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_FAST64_FMTd__ = "lld";
pub const __INT_FAST64_FMTi__ = "lli";
pub const __UINT_FAST64_TYPE__ = c_ulonglong;
pub const __UINT_FAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_FAST64_FMTo__ = "llo";
pub const __UINT_FAST64_FMTu__ = "llu";
pub const __UINT_FAST64_FMTx__ = "llx";
pub const __UINT_FAST64_FMTX__ = "llX";
pub const __USER_LABEL_PREFIX__ = "";
pub const __FINITE_MATH_ONLY__ = @as(c_int, 0);
pub const __GNUC_STDC_INLINE__ = @as(c_int, 1);
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = @as(c_int, 1);
pub const __GCC_DESTRUCTIVE_SIZE = @as(c_int, 64);
pub const __GCC_CONSTRUCTIVE_SIZE = @as(c_int, 64);
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __NO_INLINE__ = @as(c_int, 1);
pub const __PIC__ = @as(c_int, 2);
pub const __pic__ = @as(c_int, 2);
pub const __FLT_RADIX__ = @as(c_int, 2);
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __GCC_ASM_FLAG_OUTPUTS__ = @as(c_int, 1);
pub const __code_model_small__ = @as(c_int, 1);
pub const __amd64__ = @as(c_int, 1);
pub const __amd64 = @as(c_int, 1);
pub const __x86_64 = @as(c_int, 1);
pub const __x86_64__ = @as(c_int, 1);
pub const __SEG_GS = @as(c_int, 1);
pub const __SEG_FS = @as(c_int, 1);
pub const __seg_gs = @compileError("unable to translate macro: undefined identifier `address_space`");
// (no file):365:9
pub const __seg_fs = @compileError("unable to translate macro: undefined identifier `address_space`");
// (no file):366:9
pub const __znver2 = @as(c_int, 1);
pub const __znver2__ = @as(c_int, 1);
pub const __tune_znver2__ = @as(c_int, 1);
pub const __REGISTER_PREFIX__ = "";
pub const __NO_MATH_INLINES = @as(c_int, 1);
pub const __AES__ = @as(c_int, 1);
pub const __PCLMUL__ = @as(c_int, 1);
pub const __LAHF_SAHF__ = @as(c_int, 1);
pub const __LZCNT__ = @as(c_int, 1);
pub const __RDRND__ = @as(c_int, 1);
pub const __FSGSBASE__ = @as(c_int, 1);
pub const __BMI__ = @as(c_int, 1);
pub const __BMI2__ = @as(c_int, 1);
pub const __POPCNT__ = @as(c_int, 1);
pub const __PRFCHW__ = @as(c_int, 1);
pub const __RDSEED__ = @as(c_int, 1);
pub const __ADX__ = @as(c_int, 1);
pub const __MWAITX__ = @as(c_int, 1);
pub const __MOVBE__ = @as(c_int, 1);
pub const __SSE4A__ = @as(c_int, 1);
pub const __FMA__ = @as(c_int, 1);
pub const __F16C__ = @as(c_int, 1);
pub const __SHA__ = @as(c_int, 1);
pub const __FXSR__ = @as(c_int, 1);
pub const __XSAVE__ = @as(c_int, 1);
pub const __XSAVEOPT__ = @as(c_int, 1);
pub const __XSAVEC__ = @as(c_int, 1);
pub const __XSAVES__ = @as(c_int, 1);
pub const __CLFLUSHOPT__ = @as(c_int, 1);
pub const __CLWB__ = @as(c_int, 1);
pub const __WBNOINVD__ = @as(c_int, 1);
pub const __CLZERO__ = @as(c_int, 1);
pub const __RDPID__ = @as(c_int, 1);
pub const __RDPRU__ = @as(c_int, 1);
pub const __CRC32__ = @as(c_int, 1);
pub const __AVX2__ = @as(c_int, 1);
pub const __AVX__ = @as(c_int, 1);
pub const __SSE4_2__ = @as(c_int, 1);
pub const __SSE4_1__ = @as(c_int, 1);
pub const __SSSE3__ = @as(c_int, 1);
pub const __SSE3__ = @as(c_int, 1);
pub const __SSE2__ = @as(c_int, 1);
pub const __SSE2_MATH__ = @as(c_int, 1);
pub const __SSE__ = @as(c_int, 1);
pub const __SSE_MATH__ = @as(c_int, 1);
pub const __MMX__ = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 = @as(c_int, 1);
pub const __SIZEOF_FLOAT128__ = @as(c_int, 16);
pub const _WIN32 = @as(c_int, 1);
pub const _WIN64 = @as(c_int, 1);
pub const WIN32 = @as(c_int, 1);
pub const __WIN32 = @as(c_int, 1);
pub const __WIN32__ = @as(c_int, 1);
pub const WINNT = @as(c_int, 1);
pub const __WINNT = @as(c_int, 1);
pub const __WINNT__ = @as(c_int, 1);
pub const WIN64 = @as(c_int, 1);
pub const __WIN64 = @as(c_int, 1);
pub const __WIN64__ = @as(c_int, 1);
pub const __MINGW64__ = @as(c_int, 1);
pub const __MSVCRT__ = @as(c_int, 1);
pub const __MINGW32__ = @as(c_int, 1);
pub const __declspec = @compileError("unable to translate C expr: unexpected token '__attribute__'");
// (no file):433:9
pub const _cdecl = @compileError("unable to translate macro: undefined identifier `__cdecl__`");
// (no file):434:9
pub const __cdecl = @compileError("unable to translate macro: undefined identifier `__cdecl__`");
// (no file):435:9
pub const _stdcall = @compileError("unable to translate macro: undefined identifier `__stdcall__`");
// (no file):436:9
pub const __stdcall = @compileError("unable to translate macro: undefined identifier `__stdcall__`");
// (no file):437:9
pub const _fastcall = @compileError("unable to translate macro: undefined identifier `__fastcall__`");
// (no file):438:9
pub const __fastcall = @compileError("unable to translate macro: undefined identifier `__fastcall__`");
// (no file):439:9
pub const _thiscall = @compileError("unable to translate macro: undefined identifier `__thiscall__`");
// (no file):440:9
pub const __thiscall = @compileError("unable to translate macro: undefined identifier `__thiscall__`");
// (no file):441:9
pub const _pascal = @compileError("unable to translate macro: undefined identifier `__pascal__`");
// (no file):442:9
pub const __pascal = @compileError("unable to translate macro: undefined identifier `__pascal__`");
// (no file):443:9
pub const __STDC__ = @as(c_int, 1);
pub const __STDC_HOSTED__ = @as(c_int, 1);
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = @as(c_int, 1);
pub const __STDC_UTF_32__ = @as(c_int, 1);
pub const __STDC_EMBED_NOT_FOUND__ = @as(c_int, 0);
pub const __STDC_EMBED_FOUND__ = @as(c_int, 1);
pub const __STDC_EMBED_EMPTY__ = @as(c_int, 2);
pub const _DEBUG = @as(c_int, 1);
pub const CLAP_EXPORT = @compileError("unable to translate macro: undefined identifier `dllexport`");
// D:\code\projects\zig\zig-clap\include\clap\ext/../private/macros.h:7:18
pub const CLAP_ABI = __cdecl;
pub const CLAP_CONSTEXPR = "";
pub const CLAP_NODISCARD = "";
pub const __CLANG_STDINT_H = "";
pub const __int_least64_t = i64;
pub const __uint_least64_t = u64;
pub const __int_least32_t = i64;
pub const __uint_least32_t = u64;
pub const __int_least16_t = i64;
pub const __uint_least16_t = u64;
pub const __int_least8_t = i64;
pub const __uint_least8_t = u64;
pub const __uint32_t_defined = "";
pub const __int8_t_defined = "";
pub const __stdint_join3 = @compileError("unable to translate C expr: unexpected token '##'");
// D:\Applications\zig-windows-x86_64-0.14.0-dev.2064+b5cafe223\lib\include/stdint.h:291:9
pub const __intptr_t_defined = "";
pub const _INTPTR_T = "";
pub const _UINTPTR_T = "";
pub const __int_c_join = @compileError("unable to translate C expr: unexpected token '##'");
// D:\Applications\zig-windows-x86_64-0.14.0-dev.2064+b5cafe223\lib\include/stdint.h:328:9
pub inline fn __int_c(v: anytype, suffix: anytype) @TypeOf(__int_c_join(v, suffix)) {
    _ = &v;
    _ = &suffix;
    return __int_c_join(v, suffix);
}
pub const __uint_c = @compileError("unable to translate macro: undefined identifier `U`");
// D:\Applications\zig-windows-x86_64-0.14.0-dev.2064+b5cafe223\lib\include/stdint.h:330:9
pub const __int64_c_suffix = __INT64_C_SUFFIX__;
pub const __int32_c_suffix = __INT64_C_SUFFIX__;
pub const __int16_c_suffix = __INT64_C_SUFFIX__;
pub const __int8_c_suffix = __INT64_C_SUFFIX__;
pub inline fn INT64_C(v: anytype) @TypeOf(__int_c(v, __int64_c_suffix)) {
    _ = &v;
    return __int_c(v, __int64_c_suffix);
}
pub inline fn UINT64_C(v: anytype) @TypeOf(__uint_c(v, __int64_c_suffix)) {
    _ = &v;
    return __uint_c(v, __int64_c_suffix);
}
pub inline fn INT32_C(v: anytype) @TypeOf(__int_c(v, __int32_c_suffix)) {
    _ = &v;
    return __int_c(v, __int32_c_suffix);
}
pub inline fn UINT32_C(v: anytype) @TypeOf(__uint_c(v, __int32_c_suffix)) {
    _ = &v;
    return __uint_c(v, __int32_c_suffix);
}
pub inline fn INT16_C(v: anytype) @TypeOf(__int_c(v, __int16_c_suffix)) {
    _ = &v;
    return __int_c(v, __int16_c_suffix);
}
pub inline fn UINT16_C(v: anytype) @TypeOf(__uint_c(v, __int16_c_suffix)) {
    _ = &v;
    return __uint_c(v, __int16_c_suffix);
}
pub inline fn INT8_C(v: anytype) @TypeOf(__int_c(v, __int8_c_suffix)) {
    _ = &v;
    return __int_c(v, __int8_c_suffix);
}
pub inline fn UINT8_C(v: anytype) @TypeOf(__uint_c(v, __int8_c_suffix)) {
    _ = &v;
    return __uint_c(v, __int8_c_suffix);
}
pub const INT64_MAX = INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const INT64_MIN = -INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const UINT64_MAX = UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const __INT_LEAST64_MIN = INT64_MIN;
pub const __INT_LEAST64_MAX = INT64_MAX;
pub const __UINT_LEAST64_MAX = UINT64_MAX;
pub const __INT_LEAST32_MIN = INT64_MIN;
pub const __INT_LEAST32_MAX = INT64_MAX;
pub const __UINT_LEAST32_MAX = UINT64_MAX;
pub const __INT_LEAST16_MIN = INT64_MIN;
pub const __INT_LEAST16_MAX = INT64_MAX;
pub const __UINT_LEAST16_MAX = UINT64_MAX;
pub const __INT_LEAST8_MIN = INT64_MIN;
pub const __INT_LEAST8_MAX = INT64_MAX;
pub const __UINT_LEAST8_MAX = UINT64_MAX;
pub const INT_LEAST64_MIN = __INT_LEAST64_MIN;
pub const INT_LEAST64_MAX = __INT_LEAST64_MAX;
pub const UINT_LEAST64_MAX = __UINT_LEAST64_MAX;
pub const INT_FAST64_MIN = __INT_LEAST64_MIN;
pub const INT_FAST64_MAX = __INT_LEAST64_MAX;
pub const UINT_FAST64_MAX = __UINT_LEAST64_MAX;
pub const INT32_MAX = INT32_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal));
pub const INT32_MIN = -INT32_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal)) - @as(c_int, 1);
pub const UINT32_MAX = UINT32_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 4294967295, .decimal));
pub const INT_LEAST32_MIN = __INT_LEAST32_MIN;
pub const INT_LEAST32_MAX = __INT_LEAST32_MAX;
pub const UINT_LEAST32_MAX = __UINT_LEAST32_MAX;
pub const INT_FAST32_MIN = __INT_LEAST32_MIN;
pub const INT_FAST32_MAX = __INT_LEAST32_MAX;
pub const UINT_FAST32_MAX = __UINT_LEAST32_MAX;
pub const INT16_MAX = INT16_C(@as(c_int, 32767));
pub const INT16_MIN = -INT16_C(@as(c_int, 32767)) - @as(c_int, 1);
pub const UINT16_MAX = UINT16_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal));
pub const INT_LEAST16_MIN = __INT_LEAST16_MIN;
pub const INT_LEAST16_MAX = __INT_LEAST16_MAX;
pub const UINT_LEAST16_MAX = __UINT_LEAST16_MAX;
pub const INT_FAST16_MIN = __INT_LEAST16_MIN;
pub const INT_FAST16_MAX = __INT_LEAST16_MAX;
pub const UINT_FAST16_MAX = __UINT_LEAST16_MAX;
pub const INT8_MAX = INT8_C(@as(c_int, 127));
pub const INT8_MIN = -INT8_C(@as(c_int, 127)) - @as(c_int, 1);
pub const UINT8_MAX = UINT8_C(@as(c_int, 255));
pub const INT_LEAST8_MIN = __INT_LEAST8_MIN;
pub const INT_LEAST8_MAX = __INT_LEAST8_MAX;
pub const UINT_LEAST8_MAX = __UINT_LEAST8_MAX;
pub const INT_FAST8_MIN = __INT_LEAST8_MIN;
pub const INT_FAST8_MAX = __INT_LEAST8_MAX;
pub const UINT_FAST8_MAX = __UINT_LEAST8_MAX;
pub const __INTN_MIN = @compileError("unable to translate macro: undefined identifier `INT`");
// D:\Applications\zig-windows-x86_64-0.14.0-dev.2064+b5cafe223\lib\include/stdint.h:875:10
pub const __INTN_MAX = @compileError("unable to translate macro: undefined identifier `INT`");
// D:\Applications\zig-windows-x86_64-0.14.0-dev.2064+b5cafe223\lib\include/stdint.h:876:10
pub const __UINTN_MAX = @compileError("unable to translate macro: undefined identifier `UINT`");
// D:\Applications\zig-windows-x86_64-0.14.0-dev.2064+b5cafe223\lib\include/stdint.h:877:9
pub const __INTN_C = @compileError("unable to translate macro: undefined identifier `INT`");
// D:\Applications\zig-windows-x86_64-0.14.0-dev.2064+b5cafe223\lib\include/stdint.h:878:10
pub const __UINTN_C = @compileError("unable to translate macro: undefined identifier `UINT`");
// D:\Applications\zig-windows-x86_64-0.14.0-dev.2064+b5cafe223\lib\include/stdint.h:879:9
pub const INTPTR_MIN = -__INTPTR_MAX__ - @as(c_int, 1);
pub const INTPTR_MAX = __INTPTR_MAX__;
pub const UINTPTR_MAX = __UINTPTR_MAX__;
pub const PTRDIFF_MIN = -__PTRDIFF_MAX__ - @as(c_int, 1);
pub const PTRDIFF_MAX = __PTRDIFF_MAX__;
pub const SIZE_MAX = __SIZE_MAX__;
pub const INTMAX_MIN = -__INTMAX_MAX__ - @as(c_int, 1);
pub const INTMAX_MAX = __INTMAX_MAX__;
pub const UINTMAX_MAX = __UINTMAX_MAX__;
pub const SIG_ATOMIC_MIN = __INTN_MIN(__SIG_ATOMIC_WIDTH__);
pub const SIG_ATOMIC_MAX = __INTN_MAX(__SIG_ATOMIC_WIDTH__);
pub const WINT_MIN = __UINTN_C(__WINT_WIDTH__, @as(c_int, 0));
pub const WINT_MAX = __UINTN_MAX(__WINT_WIDTH__);
pub const WCHAR_MAX = __WCHAR_MAX__;
pub const WCHAR_MIN = __UINTN_C(__WCHAR_WIDTH__, @as(c_int, 0));
pub inline fn INTMAX_C(v: anytype) @TypeOf(__int_c(v, __INTMAX_C_SUFFIX__)) {
    _ = &v;
    return __int_c(v, __INTMAX_C_SUFFIX__);
}
pub inline fn UINTMAX_C(v: anytype) @TypeOf(__int_c(v, __UINTMAX_C_SUFFIX__)) {
    _ = &v;
    return __int_c(v, __UINTMAX_C_SUFFIX__);
}
pub const __need_ptrdiff_t = "";
pub const __need_size_t = "";
pub const __need_wchar_t = "";
pub const __need_NULL = "";
pub const __need_max_align_t = "";
pub const __need_offsetof = "";
pub const __STDDEF_H = "";
pub const _PTRDIFF_T = "";
pub const _SIZE_T = "";
pub const _WCHAR_T = "";
pub const NULL = @import("std").zig.c_translation.cast(?*anyopaque, @as(c_int, 0));
pub const __CLANG_MAX_ALIGN_T_DEFINED = "";
pub const offsetof = @compileError("unable to translate C expr: unexpected token 'an identifier'");
// D:\Applications\zig-windows-x86_64-0.14.0-dev.2064+b5cafe223\lib\include/__stddef_offsetof.h:16:9
pub const __STDBOOL_H = "";
pub const __bool_true_false_are_defined = @as(c_int, 1);
pub const @"bool" = bool;
pub const @"true" = @as(c_int, 1);
pub const @"false" = @as(c_int, 0);
pub const CLAP_VERSION_MAJOR = @as(c_int, 1);
pub const CLAP_VERSION_MINOR = @as(c_int, 2);
pub const CLAP_VERSION_REVISION = @as(c_int, 2);
pub const CLAP_VERSION_INIT = @compileError("unable to translate C expr: unexpected token '{'");
// D:\code\projects\zig\zig-clap\include\clap\ext/../version.h:27:9
pub inline fn CLAP_VERSION_LT(maj: anytype, min: anytype, rev: anytype) @TypeOf(((CLAP_VERSION_MAJOR < maj) or ((maj == CLAP_VERSION_MAJOR) and (CLAP_VERSION_MINOR < min))) or (((maj == CLAP_VERSION_MAJOR) and (min == CLAP_VERSION_MINOR)) and (CLAP_VERSION_REVISION < rev))) {
    _ = &maj;
    _ = &min;
    _ = &rev;
    return ((CLAP_VERSION_MAJOR < maj) or ((maj == CLAP_VERSION_MAJOR) and (CLAP_VERSION_MINOR < min))) or (((maj == CLAP_VERSION_MAJOR) and (min == CLAP_VERSION_MINOR)) and (CLAP_VERSION_REVISION < rev));
}
pub inline fn CLAP_VERSION_EQ(maj: anytype, min: anytype, rev: anytype) @TypeOf(((maj == CLAP_VERSION_MAJOR) and (min == CLAP_VERSION_MINOR)) and (rev == CLAP_VERSION_REVISION)) {
    _ = &maj;
    _ = &min;
    _ = &rev;
    return ((maj == CLAP_VERSION_MAJOR) and (min == CLAP_VERSION_MINOR)) and (rev == CLAP_VERSION_REVISION);
}
pub inline fn CLAP_VERSION_GE(maj: anytype, min: anytype, rev: anytype) @TypeOf(!(CLAP_VERSION_LT(maj, min, rev) != 0)) {
    _ = &maj;
    _ = &min;
    _ = &rev;
    return !(CLAP_VERSION_LT(maj, min, rev) != 0);
}
pub const CLAP_PLUGIN_FEATURE_INSTRUMENT = "instrument";
pub const CLAP_PLUGIN_FEATURE_AUDIO_EFFECT = "audio-effect";
pub const CLAP_PLUGIN_FEATURE_NOTE_EFFECT = "note-effect";
pub const CLAP_PLUGIN_FEATURE_NOTE_DETECTOR = "note-detector";
pub const CLAP_PLUGIN_FEATURE_ANALYZER = "analyzer";
pub const CLAP_PLUGIN_FEATURE_SYNTHESIZER = "synthesizer";
pub const CLAP_PLUGIN_FEATURE_SAMPLER = "sampler";
pub const CLAP_PLUGIN_FEATURE_DRUM = "drum";
pub const CLAP_PLUGIN_FEATURE_DRUM_MACHINE = "drum-machine";
pub const CLAP_PLUGIN_FEATURE_FILTER = "filter";
pub const CLAP_PLUGIN_FEATURE_PHASER = "phaser";
pub const CLAP_PLUGIN_FEATURE_EQUALIZER = "equalizer";
pub const CLAP_PLUGIN_FEATURE_DEESSER = "de-esser";
pub const CLAP_PLUGIN_FEATURE_PHASE_VOCODER = "phase-vocoder";
pub const CLAP_PLUGIN_FEATURE_GRANULAR = "granular";
pub const CLAP_PLUGIN_FEATURE_FREQUENCY_SHIFTER = "frequency-shifter";
pub const CLAP_PLUGIN_FEATURE_PITCH_SHIFTER = "pitch-shifter";
pub const CLAP_PLUGIN_FEATURE_DISTORTION = "distortion";
pub const CLAP_PLUGIN_FEATURE_TRANSIENT_SHAPER = "transient-shaper";
pub const CLAP_PLUGIN_FEATURE_COMPRESSOR = "compressor";
pub const CLAP_PLUGIN_FEATURE_EXPANDER = "expander";
pub const CLAP_PLUGIN_FEATURE_GATE = "gate";
pub const CLAP_PLUGIN_FEATURE_LIMITER = "limiter";
pub const CLAP_PLUGIN_FEATURE_FLANGER = "flanger";
pub const CLAP_PLUGIN_FEATURE_CHORUS = "chorus";
pub const CLAP_PLUGIN_FEATURE_DELAY = "delay";
pub const CLAP_PLUGIN_FEATURE_REVERB = "reverb";
pub const CLAP_PLUGIN_FEATURE_TREMOLO = "tremolo";
pub const CLAP_PLUGIN_FEATURE_GLITCH = "glitch";
pub const CLAP_PLUGIN_FEATURE_UTILITY = "utility";
pub const CLAP_PLUGIN_FEATURE_PITCH_CORRECTION = "pitch-correction";
pub const CLAP_PLUGIN_FEATURE_RESTORATION = "restoration";
pub const CLAP_PLUGIN_FEATURE_MULTI_EFFECTS = "multi-effects";
pub const CLAP_PLUGIN_FEATURE_MIXING = "mixing";
pub const CLAP_PLUGIN_FEATURE_MASTERING = "mastering";
pub const CLAP_PLUGIN_FEATURE_MONO = "mono";
pub const CLAP_PLUGIN_FEATURE_STEREO = "stereo";
pub const CLAP_PLUGIN_FEATURE_SURROUND = "surround";
pub const CLAP_PLUGIN_FEATURE_AMBISONIC = "ambisonic";
pub const clap_version = struct_clap_version;
pub const clap_host = struct_clap_host;
pub const clap_event_header = struct_clap_event_header;
pub const clap_event_flags = enum_clap_event_flags;
pub const clap_event_note = struct_clap_event_note;
pub const clap_event_note_expression = struct_clap_event_note_expression;
pub const clap_event_param_value = struct_clap_event_param_value;
pub const clap_event_param_mod = struct_clap_event_param_mod;
pub const clap_event_param_gesture = struct_clap_event_param_gesture;
pub const clap_transport_flags = enum_clap_transport_flags;
pub const clap_event_transport = struct_clap_event_transport;
pub const clap_event_midi = struct_clap_event_midi;
pub const clap_event_midi_sysex = struct_clap_event_midi_sysex;
pub const clap_event_midi2 = struct_clap_event_midi2;
pub const clap_input_events = struct_clap_input_events;
pub const clap_output_events = struct_clap_output_events;
pub const clap_audio_buffer = struct_clap_audio_buffer;
pub const clap_process = struct_clap_process;
pub const clap_plugin_descriptor = struct_clap_plugin_descriptor;
pub const clap_plugin = struct_clap_plugin;
pub const clap_plugin_posix_fd_support = struct_clap_plugin_posix_fd_support;
pub const clap_host_posix_fd_support = struct_clap_host_posix_fd_support;
